<?xml version="1.0" encoding="utf-8"?>
<!--
   ====================================================================
    This is tinyTiM, a tiny Topic Maps engine.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free
    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   ====================================================================

    $Rev:$ - $Date:$
-->
<project name="tinyTiM" default="jar" basedir=".">
    <property file="build.properties"/>

    <property name="dir.src" value="${basedir}/src/main/java"/>
    <property name="dir.test" value="${basedir}/src/test/java"/>
    <property name="dir.lib" value="${basedir}/lib"/>
    <property name="dir.res" value="${basedir}/src/main/resources"/>
    <property name="dir.coverage" value="${basedir}/coverage"/>

    <property name="lib.junit" value="${dir.lib}/junit-4.4.jar"/>
    <property name="lib.trove" value="${dir.lib}/trove-2.0.4.jar"/>
    <property name="lib.tmapi" value="${dir.lib}/tmapi-2.0a1.jar"/>
    <property name="lib.tmapi.tests" value="${dir.lib}/tmapi-2.0a1-tests.jar"/>
    <property name="lib.emma" value="${dir.lib}/emma.jar"/>
    <property name="lib.emma.task" value="${dir.lib}/emma_ant.jar"/>

    <!-- directory that contains emma.jar and emma_ant.jar: -->
    <property name="dir.emma" value="${dir.lib}" />

    <!-- path element used by EMMA taskdef below: -->
    <path id="emma.lib" >
        <pathelement location="${dir.emma}/emma.jar" />
        <pathelement location="${dir.emma}/emma_ant.jar" />
    </path>

    <!-- this loads <emma> and <emmajava> custom tasks: -->
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

    <target name="help">
        <echo message="--------------------"/>
        <echo message="tinyTiM - Build file"/>
        <echo message="--------------------"/>
        <echo message=""/>
        <echo message="Available targets:"/>
        <echo message=""/>
        <echo message=" jar         Creates the jar"/>
        <echo message=" testjar     Creates the jar with the tests"/>
        <echo message=" doc         Creates the API documentation"/>
        <echo message=" coverage    Creates a coverage report"/>
        <echo message=" release     Creates the jar and a distributable file"/>
    </target>

    <target name="init">
        <property name="dist.version" value="${version}${version_suffix}"/>
        <property name="dist.name" value="tinytim-${dist.version}"/>

        <property name="tinytim.jar" value="${dist.name}.jar"/>
        <property name="tinytim-test.jar" value="${dist.name}-tests.jar"/>
        <property name="tinytim.tar" value="${dist.name}.tar"/>
        <property name="tinytim.tar.gz" value="${tinytim.tar}.gz"/>
        <property name="tinytim.zip" value="${dist.name}.zip"/>

        <property name="dir.build" value="${basedir}/build"/>
        <property name="dir.dist.root" value="${dir.build}/dist"/>
        <property name="dir.dist" value="${dir.dist.root}/${dist.name}"/>
        <property name="dir.build.classes" value="${dir.build}/classes"/>
        <property name="dir.build.tests" value="${dir.build}/tests"/>
        <property name="dir.javadocs" value="${dir.dist}/docs/api"/>

        <path id="run.classpath" >
            <pathelement location="${dir.build.classes}" />
            <pathelement location="${dir.build.tests}" />
            <pathelement location="${lib.junit}"/>
            <pathelement location="${lib.tmapi}"/>
            <pathelement location="${lib.tmapi.tests}"/>
            <pathelement location="${lib.trove}"/>
        </path>
    </target>

    <!-- =================================================================== -->
    <!-- Clean targets                                                       -->
    <!-- =================================================================== -->
    <target name="clean" depends="init">
        <delete dir="${dir.build}"/>
        <delete dir="${dir.javadocs}"/>
    </target>
 
    <!-- =================================================================== -->
    <!-- Prepares the build directory                                        -->
    <!-- =================================================================== -->
    <target name="prepare" depends="init">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build.classes}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Coverage Tests                                                      -->
    <!-- =================================================================== -->
    <target name="coverage" depends="compile">
        <mkdir dir="${dir.build.tests}"/>
        <javac destdir="${dir.build.tests}" 
            debug="${debug}"
            optimize="${optimize}"
            target="1.5">
            <classpath>
                <pathelement location="${dir.build.classes}"/>
                <pathelement location="${lib.junit}"/>
                <pathelement location="${lib.tmapi}"/>
                <pathelement location="${lib.tmapi.tests}"/>
                <pathelement location="${lib.trove}"/>
            </classpath>
            <src path="${dir.test}"/>
        </javac>
        <mkdir dir="${dir.coverage}"/>
        <emmajava libclasspathref="emma.lib" 
                  sourcepath="${dir.src}"
                  fullmetadata="yes"
                  classname="org.tinytim.core.AllTests"
                  classpathref="run.classpath"
        >
          <filter includes="org.tinytim.*" excludes="org.tinytim.*Test*, org.tinytim.*$*" />
          <html outfile="${dir.coverage}/index.html"  />
        </emmajava>
    </target>

    <!-- =================================================================== -->
    <!-- Tests                                                               -->
    <!-- =================================================================== -->
    <target name="test" depends="compile">
        <mkdir dir="${dir.build.tests}"/>
        <javac destdir="${dir.build.tests}" 
            debug="${debug}"
            optimize="${optimize}"
            target="1.5">
            <classpath>
                <pathelement location="${dir.build.classes}"/>
                <pathelement location="${lib.junit}"/>
                <pathelement location="${lib.tmapi}"/>
                <pathelement location="${lib.tmapi.tests}"/>
                <pathelement location="${lib.trove}"/>
            </classpath>
            <src path="${dir.test}"/>
        </javac>
        <junit printsummary="true" showoutput="false"
            errorProperty="test.failed" failureProperty="test.failed"
            fork="true">
            <classpath refid="run.classpath"/>
            <formatter type="brief" usefile="false"/>
            <test name="org.tinytim.core.AllTests"/>
        </junit>
        <fail message="Tests failed. Check test output." if="test.failed"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compile source files                                                -->
    <!-- =================================================================== -->
    <target name="compile" depends="clean, prepare">
        <javac destdir="${dir.build.classes}"
            debug="${debug}"
            target="1.5">
            <classpath>
                <pathelement location="${lib.tmapi}"/>
                <pathelement location="${lib.trove}"/>
            </classpath>
            <src path="${dir.src}"/>
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the Java Docs                                               -->
    <!-- =================================================================== -->
    <target name="doc" depends="init">
        <mkdir dir="${dir.javadocs}"/>
        <javadoc destdir="${dir.javadocs}"
            packagenames="org.tinytim.*"
            author="true"
            version="true"
            use="true"
            splitindex="true"
            noindex="false"
            windowtitle="tinyTiM API v${dist.version}"
            doctitle="tinyTiM API v${dist.version}">
            <fileset dir="${dir.src}">
                <exclude name="org/tinytim/core/**"/>
                <exclude name="org/tinytim/index/**"/>
                <exclude name="org/tinytim/internal/**"/>
            </fileset>
<!--
            <doclet name="net.gleamynode.apiviz.APIviz"
                path="${dir.lib}/apiviz-1.1.3.jar">
            </doclet>
-->
            <link href="http://www.tmapi.org/2.0/api/"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the jar                                                     -->
    <!-- =================================================================== -->
    <target name="jar" depends="compile">
        <jar destfile="${dir.build}/${tinytim.jar}">
            <fileset dir="${dir.build.classes}">
                <include name="**/*.*"/>
            </fileset>
            <fileset dir="${dir.res}">
                <include name="**/*.*"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Title" value="tinyTiM"/>
                <attribute name="Implementation-Version" value="${dist.version}"/>
                <attribute name="Implementation-URL" value="http://sourceforge.net/projects/tinytim"/>
            </manifest>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the test jar                                                -->
    <!-- =================================================================== -->
    <target name="testjar" depends="compile, test">
        <jar destfile="${dir.build}/${tinytim-test.jar}">
            <fileset dir="${dir.build.tests}">
                <include name="**/*.*"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Title" value="tinyTiM Tests"/>
                <attribute name="Implementation-Version" value="${dist.version}"/>
                <attribute name="Implementation-URL" value="http://sourceforge.net/projects/tinytim"/>
            </manifest>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Prepares a distribution                                             -->
    <!-- =================================================================== -->
    <target name="dist" depends="jar, testjar, doc">
        <mkdir dir="${dir.dist}"/>

        <copy todir="${dir.dist}" file="${dir.build}/${tinytim.jar}"/>
        <copy todir="${dir.dist}" file="${dir.build}/${tinytim-test.jar}"/>

        <copy todir="${dir.dist}/src">
            <fileset dir="${dir.src}"/>
        </copy>
        <copy todir="${dir.dist}/test">
            <fileset dir="${dir.test}"/>
        </copy>
        <copy todir="${dir.dist}/lib">
            <fileset dir="${dir.lib}">
                <include name="tmapi*"/>
                <include name="junit*"/>
                <include name="LICENSE.junit*"/>
                <include name="LICENSE.tmapi*"/>
            </fileset>
        </copy>
       
        <copy todir="${dir.dist}" file="CHANGES.txt"/>
        <copy todir="${dir.dist}" file="LICENSE.txt"/>
        <copy todir="${dir.dist}" file="README.txt"/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the distribution files (.zip and .tar.gz)                   -->
    <!--                                                                     -->
    <!-- Won't create the distribution files if a test fails                 -->
    <!-- =================================================================== -->
    <target name="release" depends="jar, test, dist">
        <tar destfile="${dir.dist.root}/${tinytim.tar}"
            basedir="${dir.dist.root}"/>
        <gzip src="${dir.dist.root}/${tinytim.tar}"
            destfile="${dir.build}/${tinytim.tar.gz}" />
        <delete file="${dir.dist.root}/${tinytim.tar}" />
        <zip destfile="${dir.build}/${tinytim.zip}" basedir="${dir.dist.root}"/>
    </target>
</project>
