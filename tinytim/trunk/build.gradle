/*
 * Gradle 0.9 build file.
 * 
 * - Download Gradle from <http://www.gradle.org/>
 * - Execute gradle build
 * 
 * TODO: Zip / Tar archives
 *
 */
group = 'org.tinytim'
version = '2.0.1'
bundleVersion = version

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'eclipse'

defaultTasks 'clean', 'build'

//TODO: Remove me once <http://jira.codehaus.org/browse/GRADLE-1079> is fixed
eclipseClasspath.variables = [:]

gradle.taskGraph.whenReady {taskGraph ->
   if (!taskGraph.hasTask(':release')) {
       version += '-SNAPSHOT'
   }
}

repositories {
    mavenCentral()
    mavenRepo urls: 'http://www.tmapi.org/maven-repository/'
    mavenRepo urls: 'http://www.tmapi.org/maven-repository/snapshots/'
    mavenRepo urls: 'http://repository.semagia.com/snapshots/'
}

configurations {
    compiledep
}

dependencies {
    compile 'org.tmapi:tmapi:2.0.2'

    compiledep 'com.semagia.mio:mio-core:0.9.6-SNAPSHOT'

    testCompile 'junit:junit:4.8.1',
                'org.tmapi:tmapi-tests:2.0.3-SNAPSHOT',
                'com.semagia.mio:mio-core-tests:0.9.6-SNAPSHOT',
                'com.semagia.mio:mio-core:0.9.6-SNAPSHOT'
}

eclipseClasspath.downloadSources = false
eclipseClasspath.plusConfigurations.add configurations.compiledep

sourceSets {
    main {
      compileClasspath = sourceSets.main.compileClasspath + configurations.compiledep
    }
}

test.doFirst {
  ant {
    unzip(src: configurations.testCompile.find { f -> f.name.startsWith('tmapi-test') },
          dest: "$buildDir/classes/test") {
        exclude '**/TestTopicMapSystemFactory*'
        exclude '**/TestRFC3986*'
    }
  }
}

jar {
    manifest {
      attributes 'Implementation-Title': 'tinyTiM', 'Implementation-Version': version
      instruction 'Bundle-Description', 'tinyTiM - A tiny Topic Maps engine'
      instruction 'Import-Package', 'org.tmapi.core, org.tmapi.index'
      instruction 'Export-Package', 'org.tinytim.mio, org.tinytim.voc, org.tinytim.utils'
    }
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file://$buildDir/maven-repo/")
    }
}
